{"version":3,"sources":["webpack:///./packages/unity-web/src/components/Buttons/ButtonGroup.js","webpack:///./packages/unity-web/src/components/Buttons/ButtonSet.js","webpack:///./packages/unity-web/src/components/Buttons/index.js","webpack:///./packages/unity-web/src/components/Modals/ModalPortal.js","webpack:///./packages/unity-web/src/components/Notification/index.js","webpack:///./packages/unity-web/src/contexts/ToastManager/ToastManager.js","webpack:///./packages/unity-web/src/forms/Input/index.js","webpack:///./packages/unity-web/src/forms/InputGroup/InputGroup.js","webpack:///./packages/unity-web/src/forms/InputGroup/index.js","webpack:///./packages/unity-web/src/forms/InputGroupAppend/InputGroupAppend.js","webpack:///./packages/unity-web/src/forms/Label/Label.js","webpack:///./packages/unity-web/src/forms/Label/index.js","webpack:///./packages/unity-web/src/forms/LabelledInput/LabelledInput.js","webpack:///./packages/unity-web/src/forms/LabelledInput/index.js","webpack:///./packages/unity-web/src/interactions/CopyToClipboard/CopyToClipboard.js","webpack:///./packages/unity-web/src/interactions/CopyToClipboard/utilities.js","webpack:///./packages/unity-web/src/interactions/CopyToClipboard/CopyToClipboard.mdx"],"names":["ButtonGroup","Object","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__","target","colors","shadow","default","EmotionButton","muted","ButtonGroupItem","_ref","selected","rest","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_Button__WEBPACK_IMPORTED_MODULE_3__","assign","type","ButtonSet","spread","css","ButtonSetPropTypes","React","propTypes","_Button__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","d","__webpack_exports__","_ButtonSet__WEBPACK_IMPORTED_MODULE_1__","ModalPortal","ready","Component","this","el","document","body","appendChild","setState","removeChild","state","ReactDOM","createPortal","props","children","_Notification__WEBPACK_IMPORTED_MODULE_0__","ToastWrapper","name","styles","Toast","message","_components_Notification__WEBPACK_IMPORTED_MODULE_3__","ToastManager","createContext","initialState","toasts","reducer","action","find","t","dedupId","data","concat","_toConsumableArray","filter","ToastManagerProvider","_useReducer2","_slicedToArray","useReducer","dispatch","value","createToast","Date","now","_objectSpread","setTimeout","Provider","_components_Modals_ModalPortal__WEBPACK_IMPORTED_MODULE_2__","map","key","variant","_Input__WEBPACK_IMPORTED_MODULE_0__","InputGroup","BorderEnd","_InputGroup__WEBPACK_IMPORTED_MODULE_0__","InputGroupAppend","Label","darkGray","variants","text","string","white","_ref2","error","danger","_Label__WEBPACK_IMPORTED_MODULE_0__","ControlledInput","inputCount","LabelledInput","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","inputId","String","_this$props","label","defaultValue","optionalAttributes","_Input__WEBPACK_IMPORTED_MODULE_2__","id","_Label__WEBPACK_IMPORTED_MODULE_3__","htmlFor","_LabelledInput__WEBPACK_IMPORTED_MODULE_0__","CopyToClipboard","useContext","onClick","str","setAttribute","style","position","left","getSelection","rangeCount","getRangeAt","select","execCommand","removeAllRanges","addRange","copyToClipboard","MDXContent","layout","components","react_default","dist","parentName","className","index_m","__position","__code","__scope","Button","interactions_CopyToClipboard_CopyToClipboard","readonly","Buttons","outline","of"],"mappings":"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","file":"static/js/packages-unity-web-src-interactions-copy-to-clipboard-copy-to-clipboard.24d1019d.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport { bool } from 'prop-types';\nimport colors from '@clarityhub/unity-core/lib/colors';\n\nimport Button, { EmotionButton } from './Button';\n\nconst ButtonGroup = styled.div`\n    box-shadow: ${colors.shadow.default};\n    display: inline-block;\n\n    ${EmotionButton} {\n        box-shadow: none;\n    }\n\n    ${EmotionButton} + ${EmotionButton} {\n        border-left-width: 0;\n        border-left: 1px solid ${colors.muted.default};\n    }\n    ${EmotionButton}:not(:last-child):not(:first-of-type) {\n        border-radius: 0;\n    }\n    ${EmotionButton}:first-of-type {\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n    }\n    ${EmotionButton}:last-child {\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n    }\n`;\n\nconst ButtonGroupItem = ({ selected, ...rest }) => (\n\t<Button type={selected ? 'primary' : 'default'} {...rest} />\n);\n\nButtonGroupItem.propTypes = {\n\tselected: bool,\n};\n\nexport { ButtonGroup, ButtonGroupItem };\n","import { css } from '@emotion/core';\nimport styled from '@emotion/styled';\nimport { bool } from 'prop-types';\nimport { EmotionButton } from './Button';\n\nconst ButtonSet = styled.div`\n    ${({ spread }) => spread && css`\n        display: flex;\n        align-items: center;\n        justify-content: flex-end;\n\n        ${EmotionButton} {\n            &:not(:first-of-type) {\n                margin-left: auto!important;\n            }\n        }\n    `}\n\n    button + button,\n    a + a,\n    a + button,\n    button + a {\n        margin-left: 0.4rem;\n    }\n`;\n\n/**\n * Hack for docz and react-docgen\n */\nconst ButtonSetPropTypes = () => <div />;\nButtonSetPropTypes.propTypes = {\n\tspread: bool,\n};\nButtonSet.propTypes = ButtonSetPropTypes.propTypes;\nexport { ButtonSetPropTypes };\n\nexport default ButtonSet;\n\n","export { default } from './Button';\nexport { default as ButtonSet } from './ButtonSet';\nexport { ButtonGroup, ButtonGroupItem } from './ButtonGroup';\n","import { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nexport default class ModalPortal extends Component {\n\tstate = {\n\t\tready: false,\n\t}\n\n\tcomponentDidMount() {\n\t\t// Append the element into the DOM on mount. We'll render\n\t\t// into the modal container element (see the HTML tab).\n\t\tthis.el = document.createElement('div');\n\t\tdocument.body.appendChild(this.el);\n\t\tthis.setState({\n\t\t\tready: true,\n\t\t});\n\t}\n\n\tcomponentWillUnmount() {\n\t\t// Remove the element from the DOM when we unmount\n\t\tif (this.el) {\n\t\t\tdocument.body.removeChild(this.el);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { ready } = this.state;\n\n\t\tif (ready) {\n\t\t\t// Use a portal to render the children into the element\n\t\t\treturn ReactDOM.createPortal(\n\t\t\t\t// Any valid React child: JSX, strings, arrays, etc.\n\t\t\t\tthis.props.children,\n\t\t\t\t// A DOM element\n\t\t\t\tthis.el,\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","export { default } from './Notification';\n","import React, { createContext, useReducer } from 'react';\nimport styled from '@emotion/styled';\n\nimport ModalPortal from '../../components/Modals/ModalPortal';\nimport Notification from '../../components/Notification';\n\nconst ToastWrapper = styled.div`\n    display: flex;\n    flex-flow: column;\n    position: fixed;\n    top: 4rem;\n    left: 50%;\n    z-index: 99999;\n\n    > * {\n        max-width: auto;\n        margin: 0.25rem;\n        display: inline-block;\n        transform: translateX(-50%);\n        width: auto !important;\n    }\n`;\n\nconst Toast = ({ message, ...props }) => (\n\t<Notification {...props}>\n\t\t{message}\n\t</Notification>\n);\n\nconst ToastManager = createContext();\n\nconst initialState = {\n\ttoasts: [],\n};\n\nconst reducer = (state, action) => {\n\tswitch (action.type) {\n\tcase 'create': {\n\t\tif (state.toasts.find(t => t.dedupId === action.data.dedupId)) {\n\t\t\treturn state;\n\t\t} else {\n\t\t\treturn {\n\t\t\t\ttoasts: [action.data, ...state.toasts],\n\t\t\t};\n\t\t}\n\t}\n\tcase 'clear':\n\t\treturn {\n\t\t\ttoasts: state.toasts.filter(t => t.dedupId !== action.dedupId),\n\t\t};\n\tdefault:\n\t\treturn state;\n\t}\n};\n\nconst ToastManagerProvider = (props) => {\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\n\tconst value = {\n\t\tcreateToast: (data) => {\n\t\t\tconst dedupId = data.dedupId || Date.now();\n\n\t\t\tdispatch({\n\t\t\t\ttype: 'create',\n\t\t\t\tdata: {\n\t\t\t\t\tdedupId,\n\t\t\t\t\t...data,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// Auto clear the toast\n\t\t\t// TODO @anna use setinterval to have a regular\n\t\t\t// cadence for removing toasts\n\t\t\tsetTimeout(() => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'clear',\n\t\t\t\t\tdedupId,\n\t\t\t\t});\n\t\t\t}, 3000);\n\t\t},\n\t};\n\n\treturn (\n\t\t<ToastManager.Provider value={value}>\n\t\t\t<ModalPortal>\n\t\t\t\t<ToastWrapper>\n\t\t\t\t\t{state.toasts.map(t => (\n\t\t\t\t\t\t<Toast key={t.dedupId} {...t} variant=\"thin\" />\n\t\t\t\t\t))}\n\t\t\t\t</ToastWrapper>\n\t\t\t</ModalPortal>\n\n\t\t\t{props.children}\n\t\t</ToastManager.Provider>\n\t);\n};\n\nexport default ToastManager;\nexport { ToastManagerProvider };\n","export { default } from './Input';\n","import styled from '@emotion/styled';\nimport { BorderEnd } from '../Input/Input';\n\nconst InputGroup = styled.div`\n    display: flex;\n    padding-top: 1rem;\n    position: relative;\n\n    & + & {\n        margin-top: 1rem;\n    }\n\n    & > :not(:last-child) ${BorderEnd} {\n        border-top-right-radius: 0 !important;\n        border-bottom-right-radius: 0 !important;\n    }\n`;\n\nexport default InputGroup;\n","export { default } from './InputGroup';\n","import styled from '@emotion/styled';\n\nimport { EmotionButton } from '../../components/Buttons/Button';\n\nconst InputGroupAppend = styled.div`\n    display: flex;\n\n    ${EmotionButton} {\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n        margin-left: -1px;\n    }\n\n    &:not(:last-child) {\n        ${EmotionButton} {\n            border-top-right-radius: 0;\n            border-bottom-right-radius: 0;\n        }\n    }\n`;\n\nexport default InputGroupAppend;\n","import { css } from '@emotion/core';\nimport styled from '@emotion/styled';\nimport { variants } from '@clarityhub/unity-core/lib/typography';\nimport colors from '@clarityhub/unity-core/lib/colors';\n\nconst Label = styled.label`\n    color: ${colors.darkGray.default};\n    cursor: text;\n    display: block;\n    flex: 1;\n    font-size: 0.9rem;\n    line-height: 1.2rem;\n    left: 0;\n    padding: 0 0.4rem;\n    position: absolute;\n    text-align: left;\n    top: 0;\n    transition: 0.2s ease-out;\n\n    ${variants.text.string}\n\n    ${({ variant }) => {\n\t\tswitch (variant) {\n\t\tcase 'white':\n\t\t\treturn `\n                color: ${colors.white.default};\n                `;\n\t\tdefault:\n\t\t\treturn ``;\n\t\t}\n\t}}\n\n    ${({ error }) => error && css`\n        color ${colors.danger.default};\n    `}\n\n`;\n\nexport default Label;\n","export { default } from './Label';\n","import React, { Component } from 'react';\nimport { string } from 'prop-types';\nimport styled from '@emotion/styled';\n\nimport Input from '../Input';\nimport Label from '../Label';\n\nconst ControlledInput = styled.div`\n    width: 100%;\n`;\n\nlet inputCount = 0;\n\nexport default class LabelledInput extends Component {\n    static propTypes = {\n    \tdefaultValue: string,\n    \tlabel: string.isRequired,\n    \tvalue: string,\n    }\n\n    static defaultProps = {\n    \ttype: 'text',\n    }\n\n\n    constructor(props) {\n    \tsuper(props);\n\n    \tthis.inputId = `input-${String(inputCount)}`;\n\n    \tinputCount++;\n    }\n\n    render() {\n    \tconst { label, error, value, defaultValue, ...rest } = this.props;\n\n    \tconst optionalAttributes = {};\n\n    \tif (defaultValue || value) {\n    \t\toptionalAttributes['data-not-empty'] = true;\n    \t}\n\n    \treturn (\n    \t\t<ControlledInput>\n    \t\t\t<Input\n    \t\t\t\t{...rest}\n\n    \t\t\t\tid={this.inputId}\n    \t\t\t\tdefaultValue={defaultValue}\n    \t\t\t\terror={error}\n    \t\t\t\tvalue={value}\n\n    \t\t\t\t{...optionalAttributes}\n\n    \t\t\t\tlabel={label}\n    \t\t\t>\n    \t\t\t\t<Label\n    \t\t\t\t\thtmlFor={this.inputId}\n    \t\t\t\t\terror={error}\n    \t\t\t\t>\n    \t\t\t\t\t{label}\n    \t\t\t\t</Label>\n    \t\t\t</Input>\n    \t\t</ControlledInput>\n    \t);\n    }\n}\n","export { default } from './LabelledInput';\n","import { useContext } from 'react';\n\nimport ToastManager from '../../contexts/ToastManager';\nimport { copyToClipboard }  from './utilities';\n\nconst CopyToClipboard = ({ children }) => {\n\tconst { createToast } = useContext(ToastManager);\n\n\tconst onClick = (data) => {\n\t\tcopyToClipboard(data);\n\n\t\tcreateToast({\n\t\t\tdedupId: 'copy-to-clipboard',\n\t\t\tmessage: 'Copied!',\n\t\t\ttype: 'success',\n\t\t});\n\t};\n\n\treturn children({ onClick });\n};\n\nexport default CopyToClipboard;\n","export const copyToClipboard = str => {\n\tconst el = document.createElement('textarea');  // Create a <textarea> element\n\tel.value = str;                                 // Set its value to the string that you want copied\n\tel.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\n\tel.style.position = 'absolute';\n\tel.style.left = '-9999px';                      // Move outside the screen to make it invisible\n\tdocument.body.appendChild(el);                  // Append the <textarea> element to the HTML document\n\tconst selected =\n            document.getSelection().rangeCount > 0        // Check if there is any content selected previously\n            \t? document.getSelection().getRangeAt(0)     // Store selection if found\n            \t: false;                                    // Mark as false to know no selection existed before\n\tel.select();                                    // Select the <textarea> content\n\tdocument.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\n\tdocument.body.removeChild(el);                  // Remove the <textarea> element\n\tif (selected) {                                 // If a selection existed before copying\n\t\tdocument.getSelection().removeAllRanges();    // Unselect everything on the HTML document\n\t\tdocument.getSelection().addRange(selected);   // Restore the original selection\n\t}\n};\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz';\nimport CopyToClipboard from './CopyToClipboard';\nimport { ToastManagerProvider } from '../../contexts/ToastManager';\nimport Button from '../../components/Buttons';\nimport InputGroup from '../../forms/InputGroup';\nimport LabelledInput from '../../forms/LabelledInput';\nimport InputGroupAppend from '../../forms/InputGroupAppend';\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"copytoclipboard\"}}>{`CopyToClipboard`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Use the CopyToClipboard interaction to allow users to quickly copy text to their clipboard`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`import CopyToClipboard from '@clarityhub/unity-web/lib/interactions/CopyToClipboard';\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Make sure you also have `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ToastManagerProvider`}</MDXTag>{` as a wrapper.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"copytoclipboard-example\"}}>{`CopyToClipboard Example`}</MDXTag>\n<Playground __position={0} __code={'<ToastManagerProvider>\\n  <CopyToClipboard>\\n    {({ onClick }) => (\\n      <InputGroup>\\n        <LabelledInput label=\\\"Access Key ID\\\" readonly value={\\'123456\\'} />\\n        <InputGroupAppend>\\n          <Button outline type=\\\"primary\\\" onClick={() => onClick(\\'123456\\')}>\\n            Copy\\n          </Button>\\n        </InputGroupAppend>\\n      </InputGroup>\\n    )}\\n  </CopyToClipboard>\\n</ToastManagerProvider>'} __scope={{props: this ? this.props : props,CopyToClipboard,ToastManagerProvider,Button,InputGroup,LabelledInput,InputGroupAppend}}>\n    <ToastManagerProvider>\n        <CopyToClipboard>\n\t\t\t{({ onClick }) => (\n\t\t\t\t<InputGroup>\n\t\t\t\t\t<LabelledInput\n\t\t\t\t\t\tlabel=\"Access Key ID\"\n                        readonly\n\t\t\t\t\t\tvalue={\"123456\"}\n\t\t\t\t\t/>\n\t\t\t\t\t<InputGroupAppend>\n\t\t\t\t\t\t<Button\n                            outline\n                            type=\"primary\"\n                            onClick={() => onClick(\"123456\")}\n                        >\n                            Copy\n                        </Button>\n\t\t\t\t\t</InputGroupAppend>\n\t\t\t\t</InputGroup>\n\t\t\t)}\n\t\t</CopyToClipboard>\n    </ToastManagerProvider>\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"prop-types\"}}>{`Prop Types`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The following props are available for the CopyToClipboard component.`}</MDXTag>\n<PropsTable of={CopyToClipboard} />\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}