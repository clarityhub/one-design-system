{"version":3,"sources":["webpack:///./packages/unity-web/src/components/Modals/ModalPortal.js","webpack:///./packages/unity-web/src/contexts/ToastManager/ToastManager.js","webpack:///./packages/unity-web/src/forms/InputGroup/InputGroup.js","webpack:///./packages/unity-web/src/forms/InputGroupAppend/InputGroupAppend.js","webpack:///./packages/unity-web/src/forms/Label/Label.js","webpack:///./packages/unity-web/src/forms/LabelledInput/LabelledInput.js","webpack:///./packages/unity-web/src/interactions/CopyToClipboard/CopyToClipboard.js","webpack:///./packages/unity-web/src/interactions/CopyToClipboard/utilities.js","webpack:///./packages/unity-web/src/interactions/CopyToClipboard/CopyToClipboard.mdx"],"names":["ModalPortal","ready","this","el","document","createElement","body","appendChild","setState","removeChild","noPortal","props","state","children","ReactDOM","createPortal","Component","ToastWrapper","Toast","message","ToastManager","createContext","initialState","toasts","reducer","action","type","find","t","dedupId","data","filter","ToastManagerProvider","useReducer","dispatch","value","createToast","Date","now","setTimeout","Provider","map","key","variant","InputGroup","BorderEnd","InputGroupAppend","EmotionButton","Label","colors","darkGray","variants","text","string","white","error","css","danger","ControlledInput","inputCount","LabelledInput","inputId","String","label","defaultValue","prefixIcon","rest","optionalAttributes","id","htmlFor","CopyToClipboard","useContext","onClick","str","setAttribute","style","position","left","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeAllRanges","addRange","copyToClipboard","MDXContent","layout","components","name","parentName","__position","__code","__scope","Button","readonly","outline","of","React"],"mappings":"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","file":"static/js/packages-unity-web-src-interactions-copy-to-clipboard-copy-to-clipboard.8852c164.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nexport default class ModalPortal extends Component {\n\tstate = {\n\t\tready: false,\n\t}\n\n\tcomponentDidMount() {\n\t\t// Append the element into the DOM on mount. We'll render\n\t\t// into the modal container element (see the HTML tab).\n\t\tthis.el = document.createElement('div');\n\t\tdocument.body.appendChild(this.el);\n\t\tthis.setState({\n\t\t\tready: true,\n\t\t});\n\t}\n\n\tcomponentWillUnmount() {\n\t\t// Remove the element from the DOM when we unmount\n\t\tif (this.el) {\n\t\t\tdocument.body.removeChild(this.el);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { noPortal } = this.props;\n\t\tconst { ready } = this.state;\n\n\t\tif (noPortal) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</div>\t\n\t\t\t);\n\t\t}\n\n\t\tif (ready) {\n\t\t\t// Use a portal to render the children into the element\n\t\t\treturn ReactDOM.createPortal(\n\t\t\t\t// Any valid React child: JSX, strings, arrays, etc.\n\t\t\t\tthis.props.children,\n\t\t\t\t// A DOM element\n\t\t\t\tthis.el,\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","import React, { createContext, useReducer } from 'react';\nimport styled from '@emotion/styled';\n\nimport ModalPortal from '../../components/Modals/ModalPortal';\nimport Notification from '../../components/Notification';\n\nconst ToastWrapper = styled.div`\n    display: flex;\n    flex-flow: column;\n    position: fixed;\n    top: 4rem;\n    left: 50%;\n    z-index: 99999;\n\n    > * {\n        max-width: auto;\n        margin: 0.25rem;\n        display: inline-block;\n        transform: translateX(-50%);\n        width: auto !important;\n    }\n`;\n\nconst Toast = ({ message, ...props }) => (\n\t<Notification {...props}>\n\t\t{message}\n\t</Notification>\n);\n\nconst ToastManager = createContext();\n\nconst initialState = {\n\ttoasts: [],\n};\n\nconst reducer = (state, action) => {\n\tswitch (action.type) {\n\tcase 'create': {\n\t\tif (state.toasts.find(t => t.dedupId === action.data.dedupId)) {\n\t\t\treturn state;\n\t\t} else {\n\t\t\treturn {\n\t\t\t\ttoasts: [action.data, ...state.toasts],\n\t\t\t};\n\t\t}\n\t}\n\tcase 'clear':\n\t\treturn {\n\t\t\ttoasts: state.toasts.filter(t => t.dedupId !== action.dedupId),\n\t\t};\n\tdefault:\n\t\treturn state;\n\t}\n};\n\nconst ToastManagerProvider = (props) => {\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\n\tconst value = {\n\t\tcreateToast: (data) => {\n\t\t\tconst dedupId = data.dedupId || Date.now();\n\n\t\t\tdispatch({\n\t\t\t\ttype: 'create',\n\t\t\t\tdata: {\n\t\t\t\t\tdedupId,\n\t\t\t\t\t...data,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// Auto clear the toast\n\t\t\t// TODO @anna use setinterval to have a regular\n\t\t\t// cadence for removing toasts\n\t\t\tsetTimeout(() => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'clear',\n\t\t\t\t\tdedupId,\n\t\t\t\t});\n\t\t\t}, 3000);\n\t\t},\n\t};\n\n\treturn (\n\t\t<ToastManager.Provider value={value}>\n\t\t\t<ModalPortal>\n\t\t\t\t<ToastWrapper>\n\t\t\t\t\t{state.toasts.map(t => (\n\t\t\t\t\t\t<Toast key={t.dedupId} {...t} variant=\"thin\" />\n\t\t\t\t\t))}\n\t\t\t\t</ToastWrapper>\n\t\t\t</ModalPortal>\n\n\t\t\t{props.children}\n\t\t</ToastManager.Provider>\n\t);\n};\n\nexport default ToastManager;\nexport { ToastManagerProvider };\n","import styled from '@emotion/styled';\nimport { BorderEnd } from '../Input/Input';\n\nconst InputGroup = styled.div`\n    display: flex;\n    padding-top: 1rem;\n    position: relative;\n\n    & + & {\n        margin-top: 1rem;\n    }\n\n    & > :not(:last-child) ${BorderEnd} {\n        border-top-right-radius: 0 !important;\n        border-bottom-right-radius: 0 !important;\n    }\n`;\n\nexport default InputGroup;\n","import styled from '@emotion/styled';\n\nimport { EmotionButton } from '../../components/Button';\n\nconst InputGroupAppend = styled.div`\n    display: flex;\n\n    ${EmotionButton} {\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n        margin-left: -1px;\n    }\n\n    &:not(:last-child) {\n        ${EmotionButton} {\n            border-top-right-radius: 0;\n            border-bottom-right-radius: 0;\n        }\n    }\n`;\n\nexport default InputGroupAppend;\n","import { css } from '@emotion/core';\nimport styled from '@emotion/styled';\nimport { variants } from '@clarityhub/unity-core/lib/typography';\nimport colors from '@clarityhub/unity-core/lib/colors';\n\nconst Label = styled.label`\n    color: ${colors.darkGray.default};\n    cursor: text;\n    display: block;\n    flex: 1;\n    font-size: 0.9rem;\n    line-height: 1.2rem;\n    left: 0;\n    padding: 0 0.4rem;\n    position: absolute;\n    text-align: left;\n    top: 0;\n    transition: 0.2s ease-out;\n\n    ${variants.text.string}\n\n    ${({ variant }) => {\n\t\tswitch (variant) {\n\t\tcase 'white':\n\t\t\treturn `\n                color: ${colors.white.default};\n                `;\n\t\tdefault:\n\t\t\treturn ``;\n\t\t}\n\t}}\n\n    ${({ error }) => error && css`\n        color ${colors.danger.default};\n    `}\n\n`;\n\nexport default Label;\n","import React, { Component } from 'react';\nimport { string, node } from 'prop-types';\nimport styled from '@emotion/styled';\n\nimport Input from '../Input';\nimport Label from '../Label';\n\nconst ControlledInput = styled.div`\n    width: 100%;\n`;\n\nlet inputCount = 0;\n\nexport default class LabelledInput extends Component {\n    static propTypes = {\n    \tdefaultValue: string,\n    \tlabel: string.isRequired,\n    \tprefixIcon: node,\n    \tvalue: string,\n    }\n\n    static defaultProps = {\n    \ttype: 'text',\n    }\n\n\n    constructor(props) {\n    \tsuper(props);\n\n    \tthis.inputId = `input-${String(inputCount)}`;\n\n    \tinputCount++;\n    }\n\n    render() {\n    \tconst { label, error, value, defaultValue, prefixIcon, ...rest } = this.props;\n\n    \tconst optionalAttributes = {};\n\n    \tif (defaultValue || value) {\n    \t\toptionalAttributes['data-not-empty'] = true;\n    \t}\n\n    \treturn (\n    \t\t<ControlledInput>\n    \t\t\t<Input\n    \t\t\t\t{...rest}\n\n    \t\t\t\tid={this.inputId}\n    \t\t\t\tdefaultValue={defaultValue}\n    \t\t\t\terror={error}\n    \t\t\t\tprefixIcon={prefixIcon}\n    \t\t\t\tvalue={value}\n\n    \t\t\t\t{...optionalAttributes}\n\n    \t\t\t\tlabel={label}\n    \t\t\t>\n    \t\t\t\t<Label\n    \t\t\t\t\thtmlFor={this.inputId}\n    \t\t\t\t\terror={error}\n    \t\t\t\t>\n    \t\t\t\t\t{label}\n    \t\t\t\t</Label>\n    \t\t\t</Input>\n    \t\t</ControlledInput>\n    \t);\n    }\n}\n","import { useContext } from 'react';\n\nimport ToastManager from '../../contexts/ToastManager';\nimport { copyToClipboard }  from './utilities';\n\nconst CopyToClipboard = ({ children }) => {\n\tconst { createToast } = useContext(ToastManager);\n\n\tconst onClick = (data) => {\n\t\tcopyToClipboard(data);\n\n\t\tcreateToast({\n\t\t\tdedupId: 'copy-to-clipboard',\n\t\t\tmessage: 'Copied!',\n\t\t\ttype: 'success',\n\t\t});\n\t};\n\n\treturn children({ onClick });\n};\n\nexport default CopyToClipboard;\n","export const copyToClipboard = str => {\n\tconst el = document.createElement('textarea');  // Create a <textarea> element\n\tel.value = str;                                 // Set its value to the string that you want copied\n\tel.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\n\tel.style.position = 'absolute';\n\tel.style.left = '-9999px';                      // Move outside the screen to make it invisible\n\tdocument.body.appendChild(el);                  // Append the <textarea> element to the HTML document\n\tconst selected =\n            document.getSelection().rangeCount > 0        // Check if there is any content selected previously\n            \t? document.getSelection().getRangeAt(0)     // Store selection if found\n            \t: false;                                    // Mark as false to know no selection existed before\n\tel.select();                                    // Select the <textarea> content\n\tdocument.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\n\tdocument.body.removeChild(el);                  // Remove the <textarea> element\n\tif (selected) {                                 // If a selection existed before copying\n\t\tdocument.getSelection().removeAllRanges();    // Unselect everything on the HTML document\n\t\tdocument.getSelection().addRange(selected);   // Restore the original selection\n\t}\n};\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz';\nimport CopyToClipboard from './CopyToClipboard';\nimport { ToastManagerProvider } from '../../contexts/ToastManager';\nimport Button from '../../components/Buttons';\nimport InputGroup from '../../forms/InputGroup';\nimport LabelledInput from '../../forms/LabelledInput';\nimport InputGroupAppend from '../../forms/InputGroupAppend';\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"copytoclipboard\"}}>{`CopyToClipboard`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Use the CopyToClipboard interaction to allow users to quickly copy text to their clipboard`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`import CopyToClipboard from '@clarityhub/unity-web/lib/interactions/CopyToClipboard';\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Make sure you also have `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ToastManagerProvider`}</MDXTag>{` as a wrapper.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"copytoclipboard-example\"}}>{`CopyToClipboard Example`}</MDXTag>\n<Playground __position={0} __code={'<ToastManagerProvider>\\n  <CopyToClipboard>\\n    {({ onClick }) => (\\n      <InputGroup>\\n        <LabelledInput label=\\\"Access Key ID\\\" readonly value={\\'123456\\'} />\\n        <InputGroupAppend>\\n          <Button outline type=\\\"primary\\\" onClick={() => onClick(\\'123456\\')}>\\n            Copy\\n          </Button>\\n        </InputGroupAppend>\\n      </InputGroup>\\n    )}\\n  </CopyToClipboard>\\n</ToastManagerProvider>'} __scope={{props: this ? this.props : props,CopyToClipboard,ToastManagerProvider,Button,InputGroup,LabelledInput,InputGroupAppend}}>\n    <ToastManagerProvider>\n        <CopyToClipboard>\n\t\t\t{({ onClick }) => (\n\t\t\t\t<InputGroup>\n\t\t\t\t\t<LabelledInput\n\t\t\t\t\t\tlabel=\"Access Key ID\"\n                        readonly\n\t\t\t\t\t\tvalue={\"123456\"}\n\t\t\t\t\t/>\n\t\t\t\t\t<InputGroupAppend>\n\t\t\t\t\t\t<Button\n                            outline\n                            type=\"primary\"\n                            onClick={() => onClick(\"123456\")}\n                        >\n                            Copy\n                        </Button>\n\t\t\t\t\t</InputGroupAppend>\n\t\t\t\t</InputGroup>\n\t\t\t)}\n\t\t</CopyToClipboard>\n    </ToastManagerProvider>\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"prop-types\"}}>{`Prop Types`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The following props are available for the CopyToClipboard component.`}</MDXTag>\n<PropsTable of={CopyToClipboard} />\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}